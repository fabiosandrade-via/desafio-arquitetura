version: '3.8'

services:
  angular-app:
    build:
      context: ./desafio-frontend
      dockerfile: Dockerfile    
    container_name: cnt-angular-frontend
    ports:
      - "4200:4200"
    depends_on:
      - lancamento
      - consolidado-diario
    networks:
      - app_network
      
  lancamento:
    image: lancamento-api
    container_name: ctn-lancamento-api
    build:
      context: ./desafio-backend/lancamento
      dockerfile: Dockerfile
    ports:
      - "8080:80"
    depends_on:
      - kafka
      - mongodb
      - redis
    networks:
      - app_network
      
  consolidado-diario:
    image: consolidado-api
    container_name: ctn-consolidado-api
    build:
      context: ./desafio-backend/consolidado
      dockerfile: Dockerfile
    ports:
      - "8081:80"
    depends_on:
      - kafka
      - redis
    networks:
      - app_network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    networks:
      - app_network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    restart: always
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - app_network

  mongodb:
    image: mongo:6.0
    container_name: mongodb_container
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: fabio
    volumes:
      - mongodb_data:/data/db
    networks:
      - app_network

  redis:
    image: redis:latest
    container_name: redis_cache
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: ["redis-server", "--appendonly", "yes"]
    networks:
      - app_network

  prometheus:
    build:
        context: ./prometheus
        dockerfile: Dockerfile
        args:
            version: 1  
    image: prometheus-local
    container_name: ctn-prometheus
    volumes:
      - './prometheus/data:/data'
    ports:
      - "9090:9090"
    networks:
      - app_network

  grafana:
    image: grafana/grafana
    container_name: ctn-grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    volumes:
      - ./grafana:/var/lib/grafana      
    networks:
      - app_network
      
volumes:
  redis_data:
    driver: local
  mongodb_data:
    driver: local

networks:
  app_network:
    driver: bridge
